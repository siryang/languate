表一转换说明符及作为结果的打印输出
转换说明	输出
%a	浮点数、十六进制数字和p-记数法 (C99)
%A	浮点数、十六进制数字和P-记数法 (C99)
%c	一个字符
%d	有符号十进制整数
%e	浮点数、e-记数法
%E	浮点数、E-记数法
%f	浮点数，十进制记数法
%g	根据数值不同自动选择%f或者%e。%e格式在指数小于-4或者大于等于精度时使用
%G	根据数值不同自动选择%f或者%E。%E格式在指数小于-4或者大于等于精度时使用
%i	有符号十进制整数 (与%d相同)
%o	无符号八进制整数
%p	指针(就是指地址)
%s	字符串
%u	无符号十进制整数
%x	使用十六进制数字0f的无符号十六进制整数
%X	使用十六进制数字0F的无符号十六进制整数
%%	打印一个百分号


表二 printf()修饰符
修饰符	意义
标志	五种标志 (-、+、空格、#和0)都将在表三中描述，可以使用零个或多个标志

digit(s)	字段宽度的最小值。如果该字段不能容纳要打印的数或者字符串，系统会使用更宽的字段。示例：“M”

.digit(s)	精度。对于%e、%E和%f转换，是将要在小数点的右边打印的数字的位数。对于%g和%G转换，是有效数字的最大位数。对于%s转换，是将要打印的字符的最大数目。对于整数转换，是将要打印的数字的最小位数；如果必要，要使用前导零来达到这个位数。只使用“.”表示其后跟随一个零，所以%.f与%.0f相同。示例：“%5.2f”打印一个浮点数，他的字段宽度为5个字符，小数点后有两个数字。

h	和整数转换说明符一起使用，表示一个short int或者unsigned short int类型数值。示例：“%hu”、“%hx”和“%6.4hd”

hh	和整数转换说明符一起使用，表示一个signed char或者unsigned char类型数值。示例：“%hhu”、“%hhx”和“%6.4hhd”

j	和整数转换说明符一起使用，表示一个intmax_t或uintmax_t值。示例：“%jd”和“%8jX”

l	和整数说明符一起使用，表示一个long int或者unsigned long int类型值。
示例：“%ld”和“%8lu”
ll	和整数说明符一起使用，表示一个long long int或unsigned long long int类型值 (C99)。
示例：“%lld”和“%8llu”
L	和浮点转换说明符一起使用，表示一个long double值。
示例：“%Lf”和“.4Le”
t	和整数转换说明符一起使用，表示一个ptrdiff_t值(与两个指针之间的差相对应的类型) (C99)
示例：“%td”和“ti”
z	和整数转换说明符一起使用，表示一个size_t值(sizeof返回的类型) (C99)。
示例：“%zd”和“zx”

表三printf()的标志
修饰符	意义
-	项目是左对齐的，也就是说，会把项目打印在字段的左侧开始处。示例：“%-20s”
+	有符号的值若为正，则显示带加号的符号；若为负，则带减号的符号。示例：“%+6.2f”
(空格)	有符号的值若为正，则显示时带前导空格(但是不显示符号)；若为负，则带减号符号。+标志会覆盖空格标志。示例：“% 6.2f”
#	使用转换说明的可选形式。若为%o格式，则以0开始；若为%x和%X格式，则以0x或0X开始，对于所有的浮点形式，#保证了即使不限任何数字，也打印一个小数点字符。对于%g和%G格式，它防止尾随零被删除。示例：“%#o”、“%#8.0f”和“%+#10.3E”
0	对于所有的数字格式，用前导零而不是用空格填充字段宽度。如果出现-标志或者指定了精度(对于整数)则忽略该标志。示例：“0d”和“.3f”
　　　　　　　　　　　表四 ANSIC中 scanf()的转换说明符
转换说明符	意义
%c	把输入解释成一个字符
%d	把输入解释成一个有符号十进制整数
%e，%f，%g， %a	把输入解释成一个浮点数 (%a是C99标准)
%E，%F，%G，%A	把输入解释成一个浮点数 (%A是C99标准)
%i	把输入解释成一个有符号十进制整数
%o	把输入解释成一个有符号八进制数
%p	把输入解释成一个指针(地址)
%s	把输入解释成一个字符串；输入的内容以一个非空白字符作为开始，并且包含知道下一个空白字符的全部字符
%u	把输入解释成一个无符号十进制整数
%x，%X	把输入解释成一个有符号十六进制整数
　　　　　　　　　　　表五 scanf()的转换修饰符
修饰符	意义
*	滞后赋值。示例：“%*d”
digit(s)	最大字段宽度；在达到最大字段宽度或者遇到第一个空白字符时(不管哪一个先发生都一样)停止对输入项的读取。示例：“s”
hh	把整数读作signed char或 unsigned char 。示例：“%hhd”“%hhu”
ll	把整数读作long long或者 unsigned long long (C99)。示例：“%lld”“%llu”
h，l或L	“%hd”和“hi”指示该值将会存储在一个short int中。
“%ho”“%hx”和“%hu”指示该值将会存储在一个unsigned short int中。
“%ld”和“%li”指示该值将会存储在一个long中。
“%lo”“%lx”和“%lu”指示该值将会存储在一个unsigned long中。
“%le”“%lf”和“%lg”指示该值以double类型存储。将L(而非l)与e、f和g一起使用指示该值以long double类型存储。
如果没有这些修饰符，d、i、o和x指示int类型，而e、f和g指示float类型。


=========================================================================================================================================================

/a:蜂鸣，响铃
/b:回退：向后退一格
/f:换页
/n:换行，光标到下行行首
/r:回车，光标到本行行首
/t:水平制表
/v:垂直制表
//:反斜杠
/’:单引号
/”:双引号
/?:问号
/ddd:三位八进制
/xhh:二位十六进制
/0:空字符(NULL),什么都不做

注：
1，/v垂直制表和/f换页符对屏幕没有任何影响，但会影响打印机执行响应操作。
2，/n其实应该叫回车换行。换行只是换一行，不改变光标的横坐标；回车只是回到行首，不改变光标的纵坐标。
3，/t 光标向前移动四格或八格，可以在编译器里设置
4，/’ 在字符里（即单引号里）使用。在字符串里(即双引号里)不需要，只要用 ‘ 即可。
5，/? 其实不必要。只要用 ? 就可以了（在windows VC6 和tc2 中验证）。

格式控制符参考：

格式输出字符：printf
使用：向终端输出若干个类型任意的数据。
形式：printf （格式控制符，输出列表）
说明：
格式控制符：％　　格式说明引导符。
　　　　　　－　　指定左对齐输出。
　　　　　　０　　指定空位填零。
　　　　　　m.n 指定输出域宽度及精度。
　　　　　　l.h 输出长度的修正。
　　　　　格式字符　　　指定输出的数据类型。
说明：
格式字符：指定输出项的数据类型和输出格式。
　　　　　d　　有符号十进制整数。
　　　　　o　　无符号八进制数。
　　　　　x　　无符号十六进制数。(小写的x格式中用小写字母a,b,c,d,e,f来表示10到15之间的数，大写的X则用大写的ABCDEF来表示10到15之间的数)
　　　　　u　　不带符号的十进制整数。

基本整型：两个字节，十六个bit（位）
11 11 11 11 11 11 11 11 　　等于 65535.
11 11 11 11 11 11 11 10 等于　-2.
负数的第一位（符号位）为1。负数的补码怎么得到：原码取反加一。
２的二进制数为：00 00 00 00 00 00 00 10，
取反就等于11 11 11 11 11 11 11 01,然后加1，二进制数逢二进一，
所以就得出-2 的二进制代码。

有符号的整型数可以用 %d 输出。
无符号的整型数可以用 %u 输出。

电脑里存的数字都是二进制数，最高位是符号位还是数据位，可以由输出格式符来控制。

二进制数转换八进制数：三个 1 对应一个 7 。
二进制数錾十六进制数：四位二进制对应一位十六进制，四个1 对应一个 f。

说明：　
格式字符：c 　　输出一个字符。
　　　　　s　　　输出一个字符串。
　　　　　e　　　以指数形式输出实型数。
　　　　　f 以小数形式输出实型数。
　　　　　g　　　自动决定输出格式为e和f中较短的一种，不打印无效的零。
　　　　　%　　　输出%。

注意：对于单精度数，使用 %f 格式符输出时，仅前7位是有效数字，小数6位。
　　　对于双精度数，使用 %lf 格式符输出时，前16位是有效数字，小数6位。

长度修正符
　　l：对整型指定长整型long
　　　　　　例：%ld , %lx , %lo , %lu
　　　　对实型指定双精度double
例：%lf
h：只用于整型的格式字符修正为short
例：%hd , %hx , %ho , %hu
对64位整数的输入输出，在POJ上的C++环境下(即VC++)，64位整数是：
__int64
输入输出格式为”%I64d”.

在G++环境下， 64位整数是
long long
输入输出格式为”%lld”.

域宽及精度的描述
　　M:域宽，即对应的输出项在输出设备上所占字符数
　　　　　　若：实际数据宽度>M，按实际数据宽度输出。
　　　　　　　　实际数据宽度 　　N:精度，说明输出的实型数的小数位数。

几点说明：
编译程序只是检查printf 函数的调用形式，不分析格式控制字符串，如果格式字符与输出项的类型不匹配，不进行类型转换。（输出的数为随机）
格式字符要用小写字母。
格式控制字符串中可以包含转义字符。
格式控制字符串中的普通字符则原样输出。
输出项的参数除了常数、变量外还可以是表达式、函数调用。
%g,%f和%e这三个格式用于打印浮点值。
%g格式用于打印那些不需要按列对齐的浮点数特别有用。其作用有二：
一，去掉该数尾多余的零（没有达到六位的数）
二，保留六位有效数字（多余六位的）
%e格式用于打印浮点数时，一律显示地使用指数形式：例如：输出圆周率时是：3.141593e+00
两者的区别：
%g格式打印出的数是总共6位有效数字
%e格式打印出小数点后的6位有效数字
%f禁止使用指数形式来表示浮点数。因此圆周率输出为：3.141593
（但注意它的精度要求：也是小数点后6位有效数字）
%%格式用于打印一个%字符。
%E和%G只是在输出时用大写字母（E）代替了小写字母(e)

输出正负号的技巧，例如：

printf("%+d %+d %+d/n",-5,0,5);
只要在中间加个“+”号就行。作用是输出符号位（即，数的正负号）
如果不希望正数的前面出现‘+’号，可用下面的方法
只要在中间加个“ ”号（即：空格）就行。例如：
作用：如果一个数是非负数，就在它的前面插入一个空格。

int i;
for(i=-3;i<=3;i++)
printf("% d/n",i); //注意%和d之间有一个空格
sscanf()的使用技巧：
分解字符串，很多功能都需要正则表达式的知识，所以就介绍一下最简单的几种用sscanf来分解字符串 的用法。
1.

char str[100],str1[100],str2[100];
gets(str);
sscanf(str,”%s%s”,str1,str2);
将读入的一整行字符串按空格，制表符或回车符分割成两个字符串。
2
取指定长度的字符串。如在下例中，取最大长度为4字节的字符串。